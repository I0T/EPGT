<?php

/**
 * BaseProgramIndex
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $title
 * @property integer $channel_id
 * @property Channel $Channel
 * @property Doctrine_Collection $ProgramTemplate
 * 
 * @method string              getTitle()           Returns the current record's "title" value
 * @method integer             getChannelId()       Returns the current record's "channel_id" value
 * @method Channel             getChannel()         Returns the current record's "Channel" value
 * @method Doctrine_Collection getProgramTemplate() Returns the current record's "ProgramTemplate" collection
 * @method ProgramIndex        setTitle()           Sets the current record's "title" value
 * @method ProgramIndex        setChannelId()       Sets the current record's "channel_id" value
 * @method ProgramIndex        setChannel()         Sets the current record's "Channel" value
 * @method ProgramIndex        setProgramTemplate() Sets the current record's "ProgramTemplate" collection
 * 
 * @package    epg2.0
 * @subpackage model
 * @author     Huan Tek
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProgramIndex extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('program_index');
        $this->hasColumn('title', 'string', 20, array(
             'type' => 'string',
             'length' => 20,
             ));
        $this->hasColumn('channel_id', 'integer', null, array(
             'type' => 'integer',
             ));

        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Channel', array(
             'local' => 'channel_id',
             'foreign' => 'id'));

        $this->hasMany('ProgramTemplate', array(
             'local' => 'id',
             'foreign' => 'p_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}